package com.example.diplomski.entities;
// Generated Oct 24, 2013 2:39:14 PM by Hibernate Tools 3.2.1.GA


import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;


/**
 * Racun generated by hbm2java
 */
@Entity
@Table(name="racun"
    ,catalog="diplomski"
)
public class Racun  implements java.io.Serializable {


     private Integer idRacuna;
     private Zaposleni zaposleni;
     private PoslovniPartner poslovniPartner;
     private Date datumKreiranja;
     private Date datumIzdavanja;
     private String brojRacuna;
     private Set<StavkaRacuna> stavkaRacunas = new HashSet<StavkaRacuna>(0);
     
     @Transient
     private boolean status;
     
     

    public Racun() {
    	 this.brojRacuna = Math.round(Math.random()*100000)+"";
    }

	
    public Racun(Zaposleni zaposleni, PoslovniPartner poslovniPartner) {
        this.zaposleni = zaposleni;
        this.poslovniPartner = poslovniPartner;
    }
    public Racun(Zaposleni zaposleni, PoslovniPartner poslovniPartner, Date datumKreiranja, Date datumIzdavanja, String brojRacuna, Set<StavkaRacuna> stavkaRacunas) {
       this.zaposleni = zaposleni;
       this.poslovniPartner = poslovniPartner;
       this.datumKreiranja = datumKreiranja;
       this.datumIzdavanja = datumIzdavanja;
       this.brojRacuna = Math.round(Math.random()*100000)+"";
       this.stavkaRacunas = stavkaRacunas;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)
    
    @Column(name="id_racuna", unique=true, nullable=false)
    public Integer getIdRacuna() {
        return this.idRacuna;
    }
    
    public void setIdRacuna(Integer idRacuna) {
        this.idRacuna = idRacuna;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="zaposleni", nullable=false)
    public Zaposleni getZaposleni() {
        return this.zaposleni;
    }
    
    public void setZaposleni(Zaposleni zaposleni) {
        this.zaposleni = zaposleni;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="poslovni_partner", nullable=false)
    public PoslovniPartner getPoslovniPartner() {
        return this.poslovniPartner;
    }
    
    public void setPoslovniPartner(PoslovniPartner poslovniPartner) {
        this.poslovniPartner = poslovniPartner;
    }
    @Temporal(TemporalType.DATE)
    @Column(name="datum_kreiranja", length=10)
    public Date getDatumKreiranja() {
        return this.datumKreiranja;
    }
    
    public void setDatumKreiranja(Date datumKreiranja) {
        this.datumKreiranja = datumKreiranja;
    }
    @Temporal(TemporalType.DATE)
    @Column(name="datum_izdavanja", length=10)
    public Date getDatumIzdavanja() {
        return this.datumIzdavanja;
    }
    
    public void setDatumIzdavanja(Date datumIzdavanja) {
        this.datumIzdavanja = datumIzdavanja;
    }
    
    @Column(name="broj_racuna", length=64)
    public String getBrojRacuna() {
        return this.brojRacuna;
    }
    
    public void setBrojRacuna(String brojRacuna) {
        this.brojRacuna = brojRacuna;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="racun")
    public Set<StavkaRacuna> getStavkaRacunas() {
        return this.stavkaRacunas;
    }
    
    public void setStavkaRacunas(Set<StavkaRacuna> stavkaRacunas) {
        this.stavkaRacunas = stavkaRacunas;
    }

    @Transient
	public boolean isStatus() {
		return status;
	}
	@Transient
	public void setStatus(boolean status) {
		this.status = status;
	}
	
	public void addStavka(StavkaRacuna sr){
		for(StavkaRacuna stavka: getStavkaRacunas()){
			if(stavka.getProizvodUsluga().getNaziv().equals(sr.getProizvodUsluga().getNaziv())){
				stavka.setKolicina(stavka.getKolicina()+1);
				return;
			}
		}
		
		this.stavkaRacunas.add(sr);
	}
	
	public void setReservationDates(int daysFromNow, int nights)
    {
        Calendar refDate = Calendar.getInstance();
        refDate.set(
                refDate.get(Calendar.YEAR),
                refDate.get(Calendar.MONTH),
                refDate.get(Calendar.DAY_OF_MONTH) + daysFromNow,
                0,
                0,
                0);
        setDatumIzdavanja(refDate.getTime());
        refDate.add(Calendar.DAY_OF_MONTH, nights);
        setDatumKreiranja(refDate.getTime());
    }
	
	@Transient
	public double getUkupnaCena(){
		Double ukupnaCena = new Double(0.0);
		for(StavkaRacuna sr: stavkaRacunas){
			Double cenaJedneStavke = sr.getProizvodUsluga().getCena() * sr.getKolicina();
			ukupnaCena += cenaJedneStavke;
		}
		return ukupnaCena;
	}
}


